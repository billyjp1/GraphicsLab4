package solution.shape;

/**
 * @author ags
 */
public class Sphere extends Shape {

	private static final long serialVersionUID = 3256437006337718072L;

	static double curTol = -1;
	private int numRings;
	private transient static Mesh sphereMesh;
	/**
	 * Required for IO
	 */
	public Sphere() {}

	/**
	 * @see solution.shape.Shape#buildMesh()
	 */
	public void buildMesh() {
		//TODO: Build mesh
		if(TOLERANCE == curTol) {
			mesh = sphereMesh;
			return;
		}
		curTol = TOLERANCE;
		double flatness = Math.toDegrees(Math.acos(1-curTol)) * 2;
		flatness = 360 / flatness;
		int numVerts = (int)Math.ceil(flatness);
		if (numVerts%2==1) numVerts++;
		numVerts *= 2;
		int numTriData = (int) Math.pow(numVerts, 2);
		
		float[] vertData = new float[numVerts*15];
		float[] normData = new float[numVerts*15];
		
		int[] triData = new int[numTriData*3];
		
		numRings = numVerts/2 + 1;
		
		//angle to the second ring from the top
		double ringAngle = (numRings-1)*(Math.PI / (numRings-1)) - (Math.PI/2);
		double theta = (Math.PI*2)/numVerts; 
		//Top of sphere
		int i = 0;
		int j = 0;
		for (;i < numVerts; i++) {
			vertData[i*3] = 0;
			vertData[i*3+1] = 1;
			vertData[i*3+2] = 0;
			normData[i*3] = (float)(Math.cos(ringAngle) * Math.cos(theta*j));
			normData[i*3+1] = (float)Math.sin(ringAngle);
			normData[i*3+2] = (float)(Math.cos(ringAngle) * Math.sin(theta*j));
			j++;
		}
		j = 0;
		for (;i < numVerts; i++) {
			vertData[i*3] = (float)(Math.cos(ringAngle) * Math.cos(theta*j));
			vertData[i*3+1] = (float)Math.sin(ringAngle);
			vertData[i*3+2] = (float)(Math.cos(ringAngle) * Math.sin(theta*j));
			normData[i*3] = (float)(Math.cos(ringAngle) * Math.cos(theta*j));
			normData[i*3+1] = (float)Math.sin(ringAngle);
			normData[i*3+2] = (float)(Math.cos(ringAngle) * Math.sin(theta*j));
			j++;
		}
		
		i = 0;
		for(;i < numTriData; i++) {
			triData[i*3] = i;
		}
//		for (int i = 0; i < numVerts; i++) {
//			
//			
//			for (int j = i; j < numRings+i; j++) {
//				double theta = (j-i)*(Math.PI / (numRings-1)) - (Math.PI/2);
//				vertData[k] = (float)Math.sin(theta);
//				vertData[k+1] = (float)Math.cos(theta);
//				vertData[k+2] = (float)Math.sin(circTheta*i);
//System.out.println("X: "+vertData[k]+"   Y: "+vertData[k+1]+"   Z: "+vertData[k+2]);
//				k+=3;
//			}
//			
//		}
//		 
	}
	
	private double heightAtRing(int ringNum) {
		// 180 degrees divided by number of rings * ringNum, subtract 90 degrees
		// numRings = 5
		// ringNum = 0: -90 degrees
		// ringNum = 1: -45 degrees
		// ringNum = 2: 0 degrees
		// ringNum = 3: 45 degrees
		// ringNum = 4: 90 degrees
		double theta = (ringNum)*(Math.PI / (numRings-1)) - (Math.PI/2);
		return Math.sin(theta);
	}
}
