package solution.shape;

import java.lang.Math;

/**
 * @author ags
 */
public class Cylinder extends Shape {

	private static final long serialVersionUID = 3256437006337718072L;

	static double curTol = -1;
	private transient static Mesh cylinderMesh;
	/**
	 * Required for IO
	 */
	public Cylinder() {}

	/**
	 * @see solution.shape.Shape#buildMesh()
	 */
	public void buildMesh() {
		// TODO: Build mesh 
		if(TOLERANCE == curTol) {
			mesh = cylinderMesh;
			return;
		}
		curTol = TOLERANCE;
		double flatness = Math.toDegrees(Math.acos(1-TOLERANCE)) * 2;
		flatness = 360 / flatness;
		int numVerts = (int)Math.ceil(flatness);
		if (numVerts%2==1) numVerts++;
		int numTriData = ((numVerts-2) + numVerts)*2;
		
		float[] vertData = new float[numVerts*12];
		float[] normData = new float[numVerts*12];
		
		int[] triData = new int[numTriData*3];
		
		//Top circle
		int k = 0;
		int j = 6;
		double theta = (Math.PI*2) / (numVerts/2);
		for (int i = 0; i < numVerts/2; i++) {
			vertData[k] = (float)Math.cos(i*theta);
			vertData[k+1] = 1;
			vertData[k+2] = (float)Math.sin(i*theta);
System.out.println("Point #"+i+" x="+vertData[i*6]+" y="+vertData[i*6+1]+" z="+vertData[i*6+2]);
			normData[k] = 0;
			normData[k+1] = 1;
			normData[k+2] = 0;
			
			vertData[k+3] = (float)Math.cos(i*theta);
			vertData[k+4] = 1;
			vertData[k+5] = (float)Math.sin(i*theta);
//System.out.println("Point #"+i+" x="+vertData[i*6+3]+" y="+vertData[i*6+4]+" z="+vertData[i*6+5]);			
			normData[k+3] = (float)Math.cos(i*theta);
			normData[k+4] = 0;
			normData[k+5] = (float)Math.sin(i*theta);
			k+=12;
			
			//bottom circle
			vertData[j] = (float)Math.cos(i*theta);
			vertData[j+1] = -1;
			vertData[j+2] = (float)Math.sin(i*theta);
			
			normData[j] = 0;
			normData[j+1] = -1;
			normData[j+2] = 0;
			
			vertData[j+3] = (float)Math.cos(i*theta);
			vertData[j+4] = -1;
			vertData[j+5] = (float)Math.sin(i*theta);
			
			normData[j+3] = (float)Math.cos(i*theta);
			normData[j+4] = 0;
			normData[j+5] = (float)Math.sin(i*theta);
			j+=12;
		}
		
		//bottom circle
//		for (int i = 0; i < numVerts; i++) {
//			vertData[i*6+numVerts] = (float)Math.cos(i*theta);
//			vertData[i*6+1+numVerts] = -1;
//			vertData[i*6+2+numVerts] = (float)Math.sin(i*theta);
//			
//			normData[i*6+numVerts] = 0;
//			normData[i*6+1+numVerts] = -1;
//			normData[i*6+2+numVerts] = 0;
//			
//			vertData[i*6+3+numVerts] = (float)Math.cos(i*theta);
//			vertData[i*6+4+numVerts] = -1;
//			vertData[i*6+5+numVerts] = (float)Math.sin(i*theta);
//			
//			normData[i*6+3+numVerts] = (float)Math.cos(i*theta);
//			normData[i*6+4+numVerts] = 0;
//			normData[i*6+5+numVerts] = (float)Math.sin(i*theta);
//		}
	
		//top triangles
		j = 0;
		for (int i = 0; i < numVerts-2; i++) {
			triData[i*3] = 0;
			triData[i*3+1] = (j+4);
			triData[i*3+2] = (j+2);
			j+=2;
		}
		
		//bottom triangles
//		int k = j;
//		for (int i = 0; i < numVerts-2; i++) {
//			triData[i*3+(numVerts-2)] = k;
//			triData[i*3+(numVerts-2)+1] = j+2;
//			triData[i*3+(numVerts-2)+2] = j+4;
//			j+=2;
//		}
		
		cylinderMesh = new Mesh(vertData, triData, normData);
		mesh = cylinderMesh;
	}
}
